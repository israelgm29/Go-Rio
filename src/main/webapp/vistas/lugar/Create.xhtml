<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:a="http://xmlns.jcp.org/jsf/passthrough">

    <ui:composition template="/template.xhtml">
        <ui:define name="title">
            <h:outputText value="#{bundle.CreateLugarTitle}"></h:outputText>
        </ui:define>
        <ui:define name="body">
            <h:panelGroup id="messagePanel" layout="block">
                <h:messages errorStyle="color: red" infoStyle="color: green" layout="table"/>
            </h:panelGroup>

            <div class="row">
                <div class="col-12 col-md-8">
                    <div class="container">
                        <div id="mapid" style="height: 480px"/>
                    </div>
                </div>
                <div class="col-12 col-md-4">
                    <div class="container">
                        <h4>Datos del Lugar</h4>
                        <h:form class="row g-3" prependId="false" enctype="multipart/form-data" >

                            <div class="form-outline">
                                <h:inputText class="form-control form-control-sm" id="nombre" value="#{lugarController.selected.nombre}" title="#{bundle.CreateLugarTitle_nombre}" required="true" requiredMessage="#{bundle.CreateLugarRequiredMessage_nombre}"/>
                                <h:outputLabel class="form-label" value="#{bundle.CreateLugarLabel_nombre}" for="nombre" />
                            </div>
                            
                                <h:inputTextarea  id="snow-container" a:placeholder="Escriba la descripcion del sitio" value="#{lugarController.selected.descripcion}" title="#{bundle.CreateLugarTitle_descripcion}" required="true" requiredMessage="#{bundle.CreateLugarRequiredMessage_descripcion}" rows="10"/>
                           
                            <div class="form-outline">       
                                <h:inputText class="form-control form-control-sm" id="puntox" value="#{lugarController.selected.puntox}" title="#{bundle.CreateLugarTitle_puntox}" required="true" requiredMessage="#{bundle.CreateLugarRequiredMessage_puntox}"/>
                                <h:outputLabel class="form-label" value="#{bundle.CreateLugarLabel_puntox}" for="puntox" />
                                <i class="fas fa-street-view"></i>
                            </div>
                            <div class="form-outline">
                                <h:inputText class="form-control form-control-sm" id="puntoy" value="#{lugarController.selected.puntoy}" title="#{bundle.CreateLugarTitle_puntoy}" required="true" requiredMessage="#{bundle.CreateLugarRequiredMessage_puntoy}"/>
                                <h:outputLabel class="form-label" value="#{bundle.CreateLugarLabel_puntoy}" for="puntoy" />
                                <i class="fas fa-street-view"></i>
                            </div>
                            <div class="form-outline">
                                <i class="fas fa-exclamation-circle trailing"></i>
                                <h:inputFile  class="form-control form-control-sm" id="file-id"  value="#{lugarController.imagen}" required="true"   
                                              requiredMessage="Please upload a file" alt="upload file">
                                </h:inputFile> 
                            </div>
                            <div id="textExample1" class="form-text">
                                Seleccionar una imagen para cargarla
                            </div>
                            <div class="form-outline">
                                <h:selectOneMenu class="form-select form-select-sm" id="categoria" value="#{lugarController.selected.categoria}" title="#{bundle.CreateLugarTitle_categoria}" required="true" requiredMessage="#{bundle.CreateLugarRequiredMessage_categoria}">
                                    <f:selectItems value="#{categoriaController.itemsAvailableSelectOne}"/>
                                </h:selectOneMenu>
                            </div>
                            <div id="textExample1" class="form-text">
                                Seleccionar una categoria para el sitio turistico
                            </div>
                            <div>
                                <h:commandLink class="btn btn-primary d-inline" action="#{lugarController.newImage()}" value="#{bundle.CreateLugarSaveLink}" />
                                <h:commandLink class="btn btn-light d-inline ms-2" action="#{lugarController.prepareList}" value="#{bundle.CreateLugarShowAllLink}" immediate="true"/>

                            </div>

                        </h:form>
                    </div>
                </div>
            </div>
            <h:outputScript library="js" name="leaflet.js"/>
            <h:outputScript library="js" name="quill.min.js"/>
            <h:outputScript library="js" name="Control.Geocoder.js"/>
            <script>
                const tilesProvider = 'https://tile.openstreetmap.org/{z}/{x}/{y}.png';
                let mymap = L.map('mapid').setView([-1.730298, -78.6164476], 13);
                L.tileLayer(tilesProvider, {maxZoom: 18}).addTo(mymap);
                var greenIcon = L.icon({
                    iconUrl: '#{resource['img/mark.png']}',
                    iconSize: [38, 38], // size of the icon
                    iconAnchor: [19, 38], // point of the icon which will correspond to marker's location
                    popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor
                });
                var marker;
                mymap.on('click', function (e) {
                    if (marker) { // check
                        mymap.removeLayer(marker); // remove
                    }
                    marker = new L.Marker([e.latlng.lat, e.latlng.lng], {icon: greenIcon}).addTo(mymap); // set
                    marker.bindPopup("<strong>" + e.latlng + "</strong>").addTo(mymap);
                    var lat = e.latlng.lat;
                    var lon = e.latlng.lng;
                    document.getElementById("puntox").value = lat;
                    document.getElementById("puntoy").value = lon;
                    console.log(lat);
                });


                L.Control.Watermark = L.Control.extend({
                    onAdd: function (map) {
                        var img = L.DomUtil.create('img');

                        img.src = '#{resource['img/Rio.png']}';
                        img.style.width = '100px';

                        return img;
                    },

                    onRemove: function (map) {
                        // Nothing to do here
                    }
                });

                L.control.watermark = function (opts) {
                    return new L.Control.Watermark(opts);
                }

                L.control.watermark({position: 'bottomleft'}).addTo(mymap);
                L.Control.geocoder({
                    geocoder: L.Control.Geocoder.nominatim()
                }).addTo(mymap);

            </script>
            <script>
                var quill = new Quill('#snow-container', {
                    placeholder: 'Compose an epic...',
                    theme: 'snow'
                });
            </script>
        </ui:define>
    </ui:composition>

</html>
